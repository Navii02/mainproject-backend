const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
const port = 3001; // or any port you prefer

app.use(bodyParser.json());

// MongoDB connection setup
mongoose.connect('mongodb://localhost:27017/your_database', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const teacherSchema = new mongoose.Schema({
  name: String,
  subjects: [String],
  branches: [String],
  semesters: [String],
});

const Teacher = mongoose.model('Teacher', teacherSchema);

// Routes
app.get('/api/admin/teachers', async (req, res) => {
  try {
    const teachers = await Teacher.find();
    res.json({ teachers });
  } catch (error) {
    res.status(500).json({ message: 'Internal Server Error' });
  }
});

app.post('/api/admin/addTeacher', async (req, res) => {
  const newTeacherData = req.body;
  try {
    const newTeacher = await Teacher.create(newTeacherData);
    res.json({ newTeacher });
  } catch (error) {
    res.status(500).json({ message: 'Internal Server Error' });
  }
});

app.put('/api/admin/updateTeacher/:id', async (req, res) => {
  const teacherId = req.params.id;
  const updatedTeacherData = req.body;
  try {
    const updatedTeacher = await Teacher.findByIdAndUpdate(teacherId, updatedTeacherData, {
      new: true,
    });
    res.json({ updatedTeacher });
  } catch (error) {
    res.status(500).json({ message: 'Internal Server Error' });
  }
});

app.delete('/api/admin/deleteTeacher/:id', async (req, res) => {
  const teacherId = req.params.id;
  try {
    await Teacher.findByIdAndDelete(teacherId);
    res.json({ message: 'Teacher deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Internal Server Error' });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
